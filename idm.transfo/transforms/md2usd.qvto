
modeltype mdMM "strict" uses "http://www.example.org/simplemarkdown";
modeltype usdMM "strict" uses "http://www.example.org/usd";
transformation md2usd(in md : mdMM, out usd : usdMM); 

main() {
	md.rootObjects()[Document] -> map document2Page()
}
/**
* Map a markdown Document element to usd Page element
*/
mapping mdMM::Document::document2Page() :usdMM::Page  {
	name := self.name;
	contents += self.contents -> map constructContent();		
}

// Start transformation block to pagecontent

/**
* Map a markdown Block element to usd PageContent element
*/
abstract mapping mdMM::Block::block2PageContent() : usdMM::PageContent {
	
}

// Start transformation TextContainer md to TextContainer usd

/**
* Abstract map for mapping a markdown TextContainer element to usd TextContainer element
*/
abstract mapping mdMM::TextContainer::textContainerMd2TextContainerUsd() : usdMM::TextContainer inherits mdMM::Block::block2PageContent {
	textElements += self.elements -> map contructTextElement();
}

/**
* Map a markdown Paragraph element to usd Paragraph element witch extends textContainerMd2TextContainerUsd mapper
*/
mapping mdMM::Paragraph::paragraphMd2ParagraphUsd() : usdMM::Paragraph inherits mdMM::TextContainer::textContainerMd2TextContainerUsd{
	
}

/**
* Map a markdown Title element to usd Title element witch extends textContainerMd2TextContainerUsd mapper
*/
mapping mdMM::Title::titleMd2TitleUsd() : usdMM::Title inherits mdMM::TextContainer::textContainerMd2TextContainerUsd{
	level := self.level;
}

// Strat TextElement part

/**
* Abstract mapper from markdown TextElement element to usd TextElement element
*/
abstract mapping mdMM::TextElement::textElementMd2TextElementUsd() : usdMM::TextElement {
	text := self.text;
}

/**
* Mapper from markdown Text element to usd Text element witch extends textElementMd2TextElementUsd mapper
*/
mapping mdMM::Text::textMd2TextUsd() : usdMM::Text inherits mdMM::TextElement::textElementMd2TextElementUsd{}

/**
* Mapper from markdown StrongEmphasis element to usd StrongEmphasis element witch extends textElementMd2TextElementUsd mapper
*/
mapping mdMM::StrongEmphasis::strongEmphasisMd2StrongEmphasisUsd() : usdMM::StrongEmphasis 
	inherits mdMM::TextElement::textElementMd2TextElementUsd{}

// TODO review the mdMM correspondance
mapping mdMM::Emphasis::emphasisMd2ItalicEmphasisUsd() : usdMM::ItalicEmphasis inherits mdMM::TextElement::textElementMd2TextElementUsd{}

/**
* Mapper from markdown Code element to usd Code element witch extends textElementMd2TextElementUsd mapper
*/
mapping mdMM::Code::codeMd2CodeUsd() : usdMM::Code inherits mdMM::TextElement::textElementMd2TextElementUsd {

}

// Start LinkTextElement transformation

/**
* Abstract mapper from markdown LinkTextElement element to usd LinkTextElement element witch extends textElementMd2TextElementUsd mapper.
*/
abstract mapping mdMM::LinkTextElement::linkTextElementMd2LinkTextElementUsd() : usdMM::LinkTextElement inherits mdMM::TextElement::textElementMd2TextElementUsd{
	url := self.url;
	title := self.title;
	textElements += self.textElements -> map constructLinkTextElement();
}

/**
* Mapper from markdown Link element to usd Link element witch extends linkTextElementMd2LinkTextElementUsd mapper.
*/
mapping mdMM::Link::linkMd2LinkUsd() : usdMM::Link inherits mdMM::LinkTextElement::linkTextElementMd2LinkTextElementUsd {}

/**
* Mapper from markdown Image element to usd Image element witch extends linkTextElementMd2LinkTextElementUsd mapper.
*/
mapping mdMM::Image::imageMd2ImageUsd() : usdMM::Image inherits mdMM::LinkTextElement::linkTextElementMd2LinkTextElementUsd {}

/**
* Mapper from TextElement to usd TextElement witch make disjunction beetwen linkMd2LinkUsd and imageMd2ImageUsd.
*/
mapping mdMM::TextElement::constructLinkTextElement() : usdMM::TextElement  
	disjuncts mdMM::Link::linkMd2LinkUsd, mdMM::Image::imageMd2ImageUsd {}
	
// End LinkTextElement transformation

/**
* Mapper from TextElement to usd TextElement witch make disjunction beetwen 
* textMd2TextUsd, strongEmphasisMd2StrongEmphasisUsd, emphasisMd2ItalicEmphasisUsd, codeMd2CodeUsd, linkMd2LinkUsd and imageMd2ImageUsd.
*/
mapping mdMM::TextElement::contructTextElement() : usdMM::TextElement 
	disjuncts  mdMM::Text::textMd2TextUsd, mdMM::StrongEmphasis::strongEmphasisMd2StrongEmphasisUsd,
				mdMM::Emphasis::emphasisMd2ItalicEmphasisUsd, mdMM::Code::codeMd2CodeUsd,
				mdMM::Link::linkMd2LinkUsd, mdMM::Image::imageMd2ImageUsd{}
	
//End TextElement part


// Start List transformation
//abstract mapping mdMM::List::ListMd2ListUsd() : ListElement inherits mdMM::Block::block2PageContent {
//	
//}

/**
* Mapper from markdown OrderedList element to usd OrderedList element.
*/
mapping mdMM::OrderedList::orderedListMd2OrderedListUsd() : usdMM::OrderedList  {
	items += self.items -> map listItemMd2ListItemUsd();
}

/**
* Mapper from markdown UnorderedList element to usd UnorderedList element.
*/
mapping mdMM::BulletList::unorderedListMd2UnorderedListUsd() : usdMM::UnorderedList {
	items += self.items -> map listItemMd2ListItemUsd();
}

/**
* Mapper from markdown ListItem element to usd ListItem element.
*/
mapping mdMM::ListItem::listItemMd2ListItemUsd() : usdMM::ListItem {
	elements += self.elements -> map constructListItemElement();
}

//abstract mapping mdMM::ListItemElement::listItemElementMd2ListItemElementUsd() : usdMM::ListItemElement {
//	
//}

//mapping mdMM::OrderedListItem::listItemMd2ListItemUsd() : usdMM::ListItem {
//}
//mapping mdMM::BulletListItem::listItemMd2ListItemUsd() : usdMM::ListItem {
//}

/**
* Mapper from ListItemElement to usd ListItemElement witch make disjunction beetwen 
* orderedListMd2OrderedListUsd, unorderedListMd2UnorderedListUsd, paragraphMd2ParagraphUsd,
* blockQuoteMd2BlockQuoteUsd, codeBlockMd2codeBlockUsd.
*/
mapping mdMM::ListItemElement::constructListItemElement() : usdMM::ListItemElement 
	disjuncts mdMM::OrderedList::orderedListMd2OrderedListUsd, mdMM::BulletList::unorderedListMd2UnorderedListUsd,
	 			mdMM::Paragraph::paragraphMd2ParagraphUsd, mdMM::BlockQuote::blockQuoteMd2BlockQuoteUsd,
	 			mdMM::CodeBlock::codeBlockMd2codeBlockUsd{
	
}
// End List transformation

// Start BlockQuote transformation

/**
* Mapper from markdown BlockQuote element to usd BlockQuote element witch extends block2PageContent mapper.
*/
mapping mdMM::BlockQuote::blockQuoteMd2BlockQuoteUsd() : usdMM::BlockQuote inherits mdMM::Block::block2PageContent{
	contents += self.contents -> map constructContent();
}
// End BlockQuote transformation

// Start CodeBlock transformation

/**
* Mapper from markdown CodeBlock element to usd CodeBlock element witch extends block2PageContent mapper.
*/
mapping mdMM::CodeBlock::codeBlockMd2codeBlockUsd() : usdMM::CodeBlock inherits mdMM::Block::block2PageContent{
	codeLines += self.codelines -> codeLinesMd2CodeLinesUsd();
}

/**
* Mapper from markdown CodeLine element to usd CodeLine element.
*/
mapping mdMM::CodeLine::codeLinesMd2CodeLinesUsd() : usdMM::CodeLine {
	text := self.text;
}
// End CodeBlock transformation

/**
* Mapper from markdown HorzontalLine element to usd HorzontalLine element witch extends block2PageContent mapper.
*/
mapping mdMM::HorizontalLine::horizontalLineMd2HorizontalLineUsd() : usdMM::HorizontalLine inherits mdMM::Block::block2PageContent{
	
}

/**
* Mapper from ListItemElement to usd ListItemElement witch make disjunction beetwen 
* paragraphMd2ParagraphUsd, titleMd2TitleUsd, orderedListMd2OrderedListUsd,
* unorderedListMd2UnorderedListUsd, blockQuoteMd2BlockQuoteUsd, codeBlockMd2codeBlockUsd,
* horizontalLineMd2HorizontalLineUsd
*/
mapping mdMM::Block::constructContent() : usdMM::PageContent 
	disjuncts  mdMM::Paragraph::paragraphMd2ParagraphUsd, mdMM::Title::titleMd2TitleUsd,
				mdMM::OrderedList::orderedListMd2OrderedListUsd, mdMM::BulletList::unorderedListMd2UnorderedListUsd,
				mdMM::BlockQuote::blockQuoteMd2BlockQuoteUsd, mdMM::CodeBlock::codeBlockMd2codeBlockUsd,
				mdMM::HorizontalLine::horizontalLineMd2HorizontalLineUsd{}
				
// End transformation TextContainer md to TextContainer usd

// End transformation block to pagecontent

