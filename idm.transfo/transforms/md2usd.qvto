
modeltype mdMM "strict" uses "http://www.example.org/simplemarkdown";
modeltype usdMM "strict" uses "http://www.example.org/usd";
transformation md2usd(in md : mdMM, out usd : usdMM); 

main() {
	md.rootObjects()[Document] -> map document2Page();
}

/**
* Map a markdown Document element to usd Page element.
*/
mapping mdMM::Document::document2Page() :usdMM::Page  {
	name := self.name;
	contents += self.contents -> map constructContent();		
}

// Start transformation block to pagecontent
/**
* Map a markdown Block element to usd PageContent element.
*/
abstract mapping mdMM::Block::block2PageContent() : usdMM::PageContent {
	
}

// Start transformation TextContainer md to TextContainer usd
/**
* Abstract map for mapping a markdown TextContainer element to usd TextContainer element
* wich extends block2PageContent mapper.
*/
abstract mapping mdMM::TextContainer::textContainerMd2TextContainerUsd() : usdMM::TextContainer 
	inherits mdMM::Block::block2PageContent {
		textElements += self.elements -> map contructTextElement();
}

/**
* Map a markdown Paragraph element to usd Paragraph element 
* wich extends textContainerMd2TextContainerUsd mapper.
*/
mapping mdMM::Paragraph::paragraphMd2ParagraphUsd() : usdMM::Paragraph 
	inherits mdMM::TextContainer::textContainerMd2TextContainerUsd{}

/**
* Map a markdown Title element to usd Title element 
* wich extends textContainerMd2TextContainerUsd mapper.
*/
mapping mdMM::Title::titleMd2TitleUsd() : usdMM::Title 
	inherits mdMM::TextContainer::textContainerMd2TextContainerUsd{
		level := self.level;
}

// Strat TextElement transformation to TextElement 

/**
* Abstract mapper from markdown TextElement element to usd TextElement element
* TODO review this mapper usability
*/
abstract mapping mdMM::TextElement::textElementMd2TextElementUsd() : usdMM::TextElement {}

/**
* Mapper from markdown Text element to usd Text element 
* wich extends textElementMd2TextElementUsd mapper.
*/
mapping mdMM::Text::textMd2TextUsd() : usdMM::Text 
	inherits mdMM::TextElement::textElementMd2TextElementUsd{
		text := self.text;
}

/**
* Mapper from markdown Code element to usd Code element 
* wich extends textElementMd2TextElementUsd mapper.
*/
mapping mdMM::Code::codeMd2CodeUsd() : usdMM::Code 
	inherits mdMM::Text::textMd2TextUsd {}

// Start CompositeTextElement transformation from mdMM to usdMM

/**
* Abstract mapper from markdown CompositeTextElement element to usd CompositeTextElement element
* TODO review this mapper usability.
*/
abstract mapping mdMM::CompositeTextElement::compositeTextElementMd2CompositeTextElementUsd() : usdMM::CompositeTextElement {
	subTextElements += self.subtext -> map contructTextElement();
}

// Start Emphasis transformation from mdMM to usdMM

/**
* Mapper from markdown StrongEmphasis element to usd StrongEmphasis element 
* wich extends compositeTextElementMd2CompositeTextElementUsd mapper.
*/
mapping mdMM::StrongEmphasis::strongEmphasisMd2StrongEmphasisUsd() : usdMM::StrongEmphasis 
	inherits mdMM::CompositeTextElement::compositeTextElementMd2CompositeTextElementUsd{}

/**
* Mapper from markdown Emphasis element to usd ItalicEmphasis element 
* wich extends compositeTextElementMd2CompositeTextElementUsd mapper.
*/
mapping mdMM::Emphasis::emphasisMd2ItalicEmphasisUsd() : usdMM::ItalicEmphasis 
	inherits mdMM::CompositeTextElement::compositeTextElementMd2CompositeTextElementUsd{} 
// End Emphasis transformation 

// Start Link transformation from mdMM to usdMM
/**
* Abstract mapper from markdown UrlBasedLink element to usd UrlBasedLink element 
* wich extends compositeTextElementMd2CompositeTextElementUsd mapper.
*/
abstract mapping mdMM::UrlBasedLink::urlBasedLinkMd2UrlBasedLinkUsd() : usdMM::UrlBasedLink 
	inherits mdMM::CompositeTextElement::compositeTextElementMd2CompositeTextElementUsd{
		url := self.url;
		title := self.title;
}

/**
* Mapper from markdown Link element to usd Link element 
* wich extends urlBasedLinkMd2UrlBasedLinkUsd mapper.
*/
mapping mdMM::Link::linkMd2LinkUsd() : usdMM::Link
	inherits mdMM::UrlBasedLink::urlBasedLinkMd2UrlBasedLinkUsd
	when {not self.isLinkButton()}  {
	
}

// Start transformation from md link to usd button

/**
* Mapper from markdown Link element to usd button element 
* wich extends textElementMd2TextElementUsd mapper.
*/
mapping mdMM::Link::linkButtonMd2ButtonUsd() : usdMM::Button 
	inherits mdMM::TextElement::textElementMd2TextElementUsd 
	when {self.isLinkButton()} {
	type := self.getType();
	textContent := self.getTextContent();
	}


/**
* A query to check if given link is button. 
*/
query mdMM::Link::isLinkButton() : Boolean {
	var textElem := self.allSubobjectsOfType(Text);
	textElem -> forOne(i){
		if (i.text.startsWith('[') and i.text.find("btn") > 0){
			//log(i.text);
			return true;
		}else {
			return false;
		}
	};
	return false;	
}

/**
* A query to get a given link type witch is in [type]textContent. 
*/
query mdMM::Link::getType() : String {
	var textElem := self.allSubobjectsOfType(Text);
	textElem -> forOne(i){
		var before := i.text.substringBefore(']');
		var after := before.substringAfter('[');
		return after;
	};
	return "";
}

/**
* A query to get a given link textcontent witch is after [type]textContent. 
*/
query mdMM::Link::getTextContent() : String {
	var textElem := self.allSubobjectsOfType(Text);
	textElem -> forOne(i){
		return i.text.substringAfter(']');
	};
	return "";
}
// End transformation from md link to usd button

/**
* Mapper from markdown LinkWithRef element to usd Link element 
* wich extends compositeTextElementMd2CompositeTextElementUsd mapper.
*/
mapping mdMM::LinkWithRef::linkWithRefMd2LinkUsd() : usdMM::Link 
	inherits mdMM::CompositeTextElement::compositeTextElementMd2CompositeTextElementUsd{
	init {
		var ref := self.reference.findLinkReference();
	}
	if (ref <> null) then {
		result.url := ref.url;
		result.title := ref.title;	
	} endif;	
}
/**
* A query to find a Reference of a given link reference name. 
*/
query String::findLinkReference() : Reference {
	var mdReferences := md.objectsOfType(Reference);
	return mdReferences -> selectOne(i | i.reference = self);
}

/**
* Mapper from markdown Image element to usd Image element 
* wich extends urlBasedLinkMd2UrlBasedLinkUsd mapper.
*/
mapping mdMM::Image::imageMd2ImageUsd() : usdMM::Image 
	inherits mdMM::UrlBasedLink::urlBasedLinkMd2UrlBasedLinkUsd {}

// End Link transformation

/**
* Mapper from TextElement to usd TextElement wich make disjunction beetwen 
* textMd2TextUsd, strongEmphasisMd2StrongEmphasisUsd, emphasisMd2ItalicEmphasisUsd, 
* codeMd2CodeUsd, linkMd2LinkUsd, imageMd2ImageUsd and linkWithRefMd2LinkUsd.
*/
mapping mdMM::TextElement::contructTextElement() : usdMM::TextElement
	disjuncts  mdMM::Text::textMd2TextUsd, mdMM::StrongEmphasis::strongEmphasisMd2StrongEmphasisUsd,
				mdMM::Emphasis::emphasisMd2ItalicEmphasisUsd, mdMM::Code::codeMd2CodeUsd,
				mdMM::Link::linkMd2LinkUsd, mdMM::Image::imageMd2ImageUsd,
				mdMM::LinkWithRef::linkWithRefMd2LinkUsd, mdMM::Link::linkButtonMd2ButtonUsd{}

//End TextElement transformation
		
// Start ListElement transformation from mdMM to usdMM

/** Get an error because the name List maybe reserved by the langage */
//abstract mapping mdMM::List::ListMd2ListUsd() : ListElement inherits mdMM::Block::block2PageContent {
//	
//}

/**
* Mapper from markdown OrderedList element to usd OrderedList element.
*/
mapping mdMM::OrderedList::orderedListMd2OrderedListUsd() : usdMM::OrderedList  {
	items += self.items -> map listItemMd2ListItemUsd();
}

/**
* Mapper from markdown UnorderedList element to usd UnorderedList element.
*/
mapping mdMM::BulletList::unorderedListMd2UnorderedListUsd() : usdMM::UnorderedList {
	items += self.items -> map listItemMd2ListItemUsd();
}

/**
* Mapper from markdown ListItem element to usd ListItem element.
*/
mapping mdMM::ListItem::listItemMd2ListItemUsd() : usdMM::ListItem {
	elements += self.elements -> map constructListItemElement();
}

/**
* Mapper from ListItemElement to usd ListItemElement wich make disjunction beetwen 
* orderedListMd2OrderedListUsd, unorderedListMd2UnorderedListUsd, paragraphMd2ParagraphUsd,
* blockQuoteMd2BlockQuoteUsd, codeBlockMd2codeBlockUsd.
*/
mapping mdMM::ListItemElement::constructListItemElement() : usdMM::ListItemElement 
	disjuncts mdMM::OrderedList::orderedListMd2OrderedListUsd, mdMM::BulletList::unorderedListMd2UnorderedListUsd,
	 			mdMM::Paragraph::paragraphMd2ParagraphUsd,mdMM::CodeBlock::codeBlockMd2codeBlockUsd, 
	 			mdMM::BlockQuote::blockQuoteMd2BlockQuoteUsd{}
	 			
// End ListElement transformation	

// Start CodeBlock transformation

/**
* Mapper from markdown CodeBlock element to usd CodeBlock element 
* wich extends block2PageContent mapper.
*/
mapping mdMM::CodeBlock::codeBlockMd2codeBlockUsd() : usdMM::CodeBlock 
	inherits mdMM::Block::block2PageContent{
		codeLines += self.codelines -> codeLinesMd2CodeLinesUsd();
}

/**
* Mapper from markdown CodeLine element to usd CodeLine element.
*/
mapping mdMM::CodeLine::codeLinesMd2CodeLinesUsd() : usdMM::CodeLine {
	text := self.text;
}
// End CodeBlock transformation

// Start BlockQuote transformation

/**
* Mapper from markdown BlockQuote element to usd BlockQuote element 
* wich extends block2PageContent mapper.
*/
mapping mdMM::BlockQuote::blockQuoteMd2BlockQuoteUsd() : usdMM::BlockQuote 
	inherits mdMM::Block::block2PageContent{
		contents += self.contents -> map constructContent();
}
// End BlockQuote transformation

/**
* Mapper from markdown HorzontalLine element to usd HorzontalLine element 
* wich extends block2PageContent mapper.
*/
mapping mdMM::HorizontalLine::horizontalLineMd2HorizontalLineUsd() : usdMM::HorizontalLine 
	inherits mdMM::Block::block2PageContent{}

// Start Table transformation md to usd

/**
* Mapper from markdown TableBlock element to usd Table element.
*/
mapping mdMM::TableBlock::tableBlockMd2TableUsd() : usdMM::Table {
	tableSections += self.sections -> map constructTableSection();
}

/**
* Abstarct mapper from markdown TableSection element to usd TableSection element.
*/
abstract mapping mdMM::TableSection::tableSectionMd2TableSectionUsd() : usdMM::TableSection {
	rows += self.rows -> map tableRowMd2TableRowUsd();
}

/**
* Mapper from markdown TableHead element to usd TableHead element 
* wich extends tableSectionMd2TableSectionUsd mapper.
*/
mapping mdMM::TableHead::tableHeadMd2TableHeadUsd() : usdMM::TableHead 
	inherits mdMM::TableSection::tableSectionMd2TableSectionUsd {}

/**
* Mapper from markdown TableBody element to usd TableBody element 
* wich extends tableSectionMd2TableSectionUsd mapper.
*/
mapping mdMM::TableBody::tableHeadMd2TableHeadUsd() : usdMM::TableBody 
	inherits mdMM::TableSection::tableSectionMd2TableSectionUsd {}
	
/**
* Mapper from markdown TableSection element to usd TableSection element 
* wich extends tableSectionMd2TableSectionUsd mapper.
*/
mapping mdMM::TableSeparator::tableSeparatorMd2TableSeparatorUsd() : usdMM::TableSeparator 
	inherits mdMM::TableSection::tableSectionMd2TableSectionUsd {}

/**
* Mapper from TableSection md element to usd TableSection element wich make disjunction beetwen 
* tableHeadMd2TableHeadUsd and tableHeadMd2TableHeadUsd.
*/
mapping mdMM::TableSection::constructTableSection() : usdMM::TableSection 
	disjuncts mdMM::TableHead::tableHeadMd2TableHeadUsd, 
				mdMM::TableBody::tableHeadMd2TableHeadUsd,
				mdMM::TableSeparator::tableSeparatorMd2TableSeparatorUsd{	
}

/**
* Mapper from markdown TableRow element to usd TableRow element 
*/
mapping mdMM::TableRow::tableRowMd2TableRowUsd() : usdMM::TableRow {
	cells += self.cells -> map tableCellMd2TableCellUsd();
}

/**
* Mapper from markdown TableCell element to usd TableCell element 
* wich extends textContainerMd2TextContainerUsd mapper.
*/
mapping mdMM::TableCell::tableCellMd2TableCellUsd() : usdMM::TableCell 
	inherits mdMM::TextContainer::textContainerMd2TextContainerUsd {}
	
// End Table transformation md to usd

/**
* Mapper from ListItemElement to usd ListItemElement wich make disjunction beetwen 
* paragraphMd2ParagraphUsd, titleMd2TitleUsd, orderedListMd2OrderedListUsd,
* unorderedListMd2UnorderedListUsd, blockQuoteMd2BlockQuoteUsd, codeBlockMd2codeBlockUsd,
* horizontalLineMd2HorizontalLineUsd and tableBlockMd2TableUsd.
*/
mapping mdMM::Block::constructContent() : usdMM::PageContent 
	disjuncts  mdMM::Paragraph::paragraphMd2ParagraphUsd, mdMM::Title::titleMd2TitleUsd,
				mdMM::OrderedList::orderedListMd2OrderedListUsd, mdMM::BulletList::unorderedListMd2UnorderedListUsd,
				mdMM::CodeBlock::codeBlockMd2codeBlockUsd, mdMM::BlockQuote::blockQuoteMd2BlockQuoteUsd,
				mdMM::HorizontalLine::horizontalLineMd2HorizontalLineUsd, mdMM::TableBlock::tableBlockMd2TableUsd{}
				
// End transformation TextContainer md to TextContainer usd

// End transformation block to pagecontent