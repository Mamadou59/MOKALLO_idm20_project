import helpers;
	

modeltype usdMM "strict" uses "http://www.example.org/usd";
modeltype bstrapMM "strict" uses "http://www.example.org/bstrap";

transformation usd2bstrap(in usd : usdMM, out bstrap : bstrapMM);

/**
* A mapper which map an usd Text element to bstrap Text element.
*/
mapping usdMM::Text::textUsd2TextBstrap() : bstrapMM::Text{	
	text := self.text;
}

/**
* A mapper which map an usd Code element to bstrap code element.
*/
mapping usdMM::Code::codeUsd2CodeBstrap() : bstrapMM::Code 
	inherits usdMM::Text::textUsd2TextBstrap{
	
}

/**
* An anstract mapper which map an usd UrlBasedLink element to bstrap UrlBasedLink element.
*/
abstract mapping usdMM::UrlBasedLink::urlBasedLinkUsd2UrlBasedLinkBstrap() : bstrapMM::UrlBasedLink {
	url := self.url;
	title := self.title;
}

/**
* An anstract mapper which map an usd CompositeTextElement element to bstrap TextNested element.
*/
abstract mapping usdMM::CompositeTextElement::compositeTextElementUsd2TextNestedBstrap() : bstrapMM::TextNested {
	textnestedelements += self.subTextElements -> map contructTextNestedElement();
}

/**
* A mapper which map an usd Link element to bstrap Link element.
* It also extends urlBasedLinkUsd2UrlBasedLinkBstrap and compositeTextElementUsd2TextNestedBstrap
*/
mapping usdMM::Link::linkUsd2LinkBstrap() : bstrapMM::Link 
	inherits usdMM::UrlBasedLink::urlBasedLinkUsd2UrlBasedLinkBstrap, 
			usdMM::CompositeTextElement::compositeTextElementUsd2TextNestedBstrap{
}

/**
* A mapper which map an usd ItalicEmphasis element to bstrap Italic element.
* It also extends compositeTextElementUsd2TextNestedBstrap.
*/
mapping usdMM::ItalicEmphasis::italicEmpUsd2ItalicBstrap() : bstrapMM::Italic 
	inherits usdMM::CompositeTextElement::compositeTextElementUsd2TextNestedBstrap{
}

/**
* A mapper which map an usd StrongEmphasis element to bstrap Strong element.
* It also extends compositeTextElementUsd2TextNestedBstrap.
*/
mapping usdMM::StrongEmphasis::strongEmphasisUsd2StrongBstrap() : bstrapMM::Strong 
	inherits usdMM::CompositeTextElement::compositeTextElementUsd2TextNestedBstrap{}

/**
* A mapper which map an usd TextElement element to bstrap TextNestedElement.
* It also make disjunction beetwen italicEmpUsd2ItalicBstrap, strongEmphasisUsd2StrongBstrap
* and textUsd2TextBstrap
*/
mapping usdMM::TextElement::contructTextNestedElement() : bstrapMM::TextNestedElement 
	disjuncts usdMM::ItalicEmphasis::italicEmpUsd2ItalicBstrap, usdMM::StrongEmphasis::strongEmphasisUsd2StrongBstrap,
				usdMM::Text::textUsd2TextBstrap{}

/**
* A mapper which map an usd Image element to bstrap Image element.
* It also extends urlBasedLinkUsd2UrlBasedLinkBstrap.
*/
mapping usdMM::Image::imageUsd2ImageBstrap() : bstrapMM::Image 
	inherits usdMM::UrlBasedLink::urlBasedLinkUsd2UrlBasedLinkBstrap{}
	
/**
* A mapper which map an usd Button element to bstrap Button element.
* With specified properties. 
*/
mapping usdMM::Button::buttonUsd2ButtonBstrap() : bstrapMM::Button{
	result.buttonproperties += self.type.parseButtonProperties();
}

/**
* A mapper which map a string properties to specified button properties
*/
mapping String::parseButtonProperties() : Set(ButtonProperty) {
	init {
		result := Set{};
		
		if (self.find('btn-primary') > 0){
			result += object ButtonStyle {
				color := Color::PRIMARY;
			};
		}
		else if (self.find("btn-info") > 0){
			result += object ButtonStyle {
				color := Color::INFO;
			};
		}
		else if (self.find("btn-dark") > 0){
			result += object ButtonStyle {
				color := Color::DARK;
			};
		}
		else if (self.find("btn-secondary") > 0){
			result += object ButtonStyle {
				color := Color::SECONDARY;
			};
		}
		else if (self.find("btn-success") > 0){
			result += object ButtonStyle {
				color := Color::SUCCESS;
			};
		}
		else if (self.find("btn-light") > 0 or self.find("btn-white") > 0){
			result += object ButtonStyle {
				color := Color::WHITE;
			};
		}
		else if (self.find("btn-danger") > 0){
			result += object ButtonStyle {
				color := Color::DANGER;
			};
		}
		else if (self.find("btn-warning") > 0){
			result += object ButtonStyle {
				color := Color::WARNING;
			};
		}
		else if (self.find("btn-link") > 0){
			result += object ButtonLink {
			};
		};
		
		if (self.find("active") > 0){
			result += object Active{};
		};
		if (self.find("disabled") > 0){
			result += object Disabled{};
		};
		if (self.find("btn-sm") > 0){
			result += object ButtonSize{
				size := Size::SMALL;
			};
		};
		if (self.find("btn-lg") > 0){
			result += object ButtonSize{
				size := Size::LARGE;
			};
		}	
	}
}


/**
* A mapper wich map an usd TextElement element to bstrap TextElement element.
*/
mapping usdMM::TextElement::constructTextElement() : bstrapMM::TextElements
	disjuncts usdMM::Text::textUsd2TextBstrap, usdMM::Code::codeUsd2CodeBstrap,
		usdMM::Link::linkUsd2LinkBstrap, usdMM::Image::imageUsd2ImageBstrap,
		usdMM::ItalicEmphasis::italicEmpUsd2ItalicBstrap, usdMM::StrongEmphasis::strongEmphasisUsd2StrongBstrap,
		usdMM::Button::buttonUsd2ButtonBstrap{}

