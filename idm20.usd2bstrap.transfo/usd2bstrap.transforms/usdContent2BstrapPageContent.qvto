import usdTextElement2bstrapTextElements;
import propertiesParsers;
	
	

modeltype usdMM "strict" uses "http://www.example.org/usd";
modeltype bstrapMM "strict" uses "http://www.example.org/bstrap";

transformation usd2bstrap(in usd : usdMM, out bstrap : bstrapMM);

/**
* Map an usd PageContent element to Bstrap PageContent element.
*/
abstract mapping usdMM::PageContent::pageContentUsd2PageContentBstrap() : bstrapMM::PageContent {
	// TODO don't forgot parsing bstrap properties
	//generalProperties += self.
}

/**
* Abstract mapper wich map an usd TextContainer element to Bstrap TextContainer element.
*/
abstract mapping usdMM::TextContainer::textContainerUsd2TextContainerBstrap() : bstrapMM::TextContainer 
	inherits usdMM::PageContent::pageContentUsd2PageContentBstrap{
		textelements += self.textElements -> map constructTextElement();
		var textWithProps := self.textElements[usdMM::Text] -> selectOne(t|t.text.containsProperties());
		if (textWithProps <> null){
			color := textWithProps.text.findColor();
			emphasis += textWithProps.text -> map disjunctsEmphasisProperties();
			var props := textWithProps.text.substringBefore(")")+")";
			if (props.find('background:') > 0){
				generalProperties += props.backGroundWrapper();
			};
			if (props.find('margin:') > 0){
				generalProperties += props.marginWrapper();
			};
			if (props.find('padding:') > 0){
				generalProperties += props.paddingWrapper();
			};
			if (props.find('border:') > 0){
				var prop := props.substringAfter('border:').substringBefore('}').substringAfter('{');
				if(prop <> null){
					prop := prop.trim();
					if (prop.find("border") > 0){
						generalProperties += prop.getBorder();
					};
					if (prop.find("borderColor") > 0){
						generalProperties += prop.getColoredBorder();
					};
				}
			}
		};		
}


/**
* A mapper wich map an usd Title element to bstrap Title element.
*/
mapping usdMM::Title::titleUsd2TitleBstrap() : bstrapMM::Title 
	inherits usdMM::TextContainer::textContainerUsd2TextContainerBstrap{
		level := self.level;
		displayproperties += self.textElements[usd::Text] -> selectOne(t|t.text.containsProperties()).text 
								-> map disjunctsDisplayProperties();
		
}


/**
* A mapper wich map an usd Paragraph element to bstrap Paragraph element.
*/
mapping usdMM::Paragraph::paragraphUsd2ParagraphBstrap() : bstrapMM::Paragraphe 
	inherits usdMM::TextContainer::textContainerUsd2TextContainerBstrap{}
	
	
/**
* A mapper wich map an usd Navigation element to bstrap Navigation element.
*/
mapping usdMM::Navigation::navigationUsd2NavigationBstrap() : bstrapMM::Navigation {
	links := object bstrapMM::Link{
		linkproperties := object LinkBrand{};
		textnestedelements := object bstrapMM::Text{
			var t := self.textContent.substringAfter(")");
			if(t = null){
				t := self.textContent;
			};
			text := t;
		};
	};
	// Mapping nav elements
	listelement += self.groupedItems -> map constructListElement();
	navbar += self.type.parseNavProperties();
	
	if (self.textContent.containsProperties()){
		var props := self.textContent.substringBefore(")")+")";
		if (props <> null){
			if (props.find('background:') > 0){
				generalProperties += props.backGroundWrapper();
			};
			if (props.find('margin:') > 0){
				generalProperties += props.marginWrapper();
			};
			if (props.find('padding:') > 0){
				generalProperties += props.paddingWrapper();
			};
			if (props.find('border:') > 0){
				var prop := props.substringAfter('border:').substringBefore('}').substringAfter('{');
				if(prop <> null){
					prop := prop.trim();
					if (prop.find("border") > 0){
						generalProperties += prop.getBorder();
					};
					if (prop.find("borderColor") > 0){
						generalProperties += prop.getColoredBorder();
					};
				}
			}
		}
	}
	
}


/**
* A mapper wich map an usd OrderedList element to bstrap OrderedList element.
*/
mapping usdMM::OrderedList::orderedListUsd2OrderedListBstrap() : bstrapMM::OrderList {
	listitems += self.items -> map listItemUsd2ListItemBstrap();
}

/**
* A mapper wich map an usd UnorderedList element to bstrap UnOrderedList element.
*/
mapping usdMM::UnorderedList::unOrderedListUsd2UnorderedBstrap() : bstrapMM::UnOrderedList {
	listitems += self.items -> map listItemUsd2ListItemBstrap();
}

/**
* A mapper wich map an usd ListItem element to bstrap ListItem element.
*/
mapping  usdMM::ListItem::listItemUsd2ListItemBstrap() : bstrapMM::ListItem {
	listitemelements += self.elements -> map constructListItemElement();
}

/**
* A mapper wich map an usd ListElement to bstrap ListElement.
*/
mapping usdMM::ListElement::constructListElement() : bstrapMM::ListElement 
	disjuncts usdMM::OrderedList::orderedListUsd2OrderedListBstrap,
				usdMM::UnorderedList::unOrderedListUsd2UnorderedBstrap{}

/**
* A mapper wich map an usd ListItemElement to bstrap ListElement.
*/
mapping usdMM::ListItemElement::constructListItemElement() : bstrapMM::ListItemElement 
	disjuncts usdMM::Paragraph::paragraphUsd2ParagraphBstrap, usdMM::OrderedList::orderedListUsd2OrderedListBstrap,
				usdMM::UnorderedList::unOrderedListUsd2UnorderedBstrap, usdMM::Link::linkUsd2LinkBstrap {
	
}


//mapping usdMM::Section::sectionUsd2ContainerBstrap() : bstrapMM::FixContainer
//	inherits usdMM::PageContent::pageContentUsd2PageContentBstrap{
//		pagecontents += self.contents -> map constructPageContent();
//}

/**
* A mapper wich map an usd HorizontalLine element to bstrap HorizontalLine element.
*/
mapping usdMM::HorizontalLine::horizontalUsd2HorizontalBstrap() : bstrapMM::HorizontalLine {}


/**
* Map a usd PageContent element to bstrap PageContent element, 
* wich make disjunction beetwen these maps paragraphUsd2ParagraphBstrap,
* titleUsd2TitleBstrap
*/
mapping usdMM::PageContent::constructPageContent() : bstrapMM::PageContent 
	disjuncts usdMM::Paragraph::paragraphUsd2ParagraphBstrap, usdMM::Title::titleUsd2TitleBstrap,
				usdMM::OrderedList::orderedListUsd2OrderedListBstrap, usdMM::UnorderedList::unOrderedListUsd2UnorderedBstrap,
				usdMM::Navigation::navigationUsd2NavigationBstrap, usdMM::HorizontalLine::horizontalUsd2HorizontalBstrap{}
	
	