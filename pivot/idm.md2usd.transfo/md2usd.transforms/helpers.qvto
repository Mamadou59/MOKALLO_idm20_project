/**
*	This module includes all helper for transformation 
*/

modeltype mdMM "strict" uses "http://www.example.org/simplemarkdown";
modeltype usdMM "strict" uses "http://www.example.org/usd";
transformation md2usd(in md : mdMM, out usd : usdMM); 
	

/**
* An helper to get a navigation first link Element
*/
helper mdMM::Paragraph::getNavigationElement() : mdMM::Link {
	return self.subobjectsOfType(mdMM::Link) -> 
					selectOne(l | l.isNavigationLink());
}

/**
* An helper to check if given link is button. 
*/
helper mdMM::Link::isLinkButton() : Boolean {
	var textElem := self.allSubobjectsOfType(Text) -> 
						selectOne(t | 
								(t.text.startsWith('[') or 
								(t.text.startsWith('properties') and t.text.find(":") > 0)) 
								and t.text.find("btn") > 0 and self.url = "#");
	return textElem <> null;	
}

/**
* An helper to check if given String contains properties. 
*/
helper String::containsProperties() : Boolean {
	return self.startsWith('properties') and self.find(":") > 0;
}

/**
* An helper to check if given link is button. 
*/
helper mdMM::Link::isNavigationLink() : Boolean {
	var textElem := self.allSubobjectsOfType(Text) -> selectOne(t | (t.text.startsWith('[') or (t.text.containsProperties())) and t.text.find("nav") > 0);
	return textElem <> null;	
}

/**
* An helper to check if given Paragraph contains Link reference Navigation. 
*/
helper mdMM::Paragraph::isThereNavigationElement() : Boolean {
	var linkElement := self.subobjectsOfType(mdMM::Link) -> selectOne(l | l.isNavigationLink());
	return linkElement <> null;
}

helper mdMM::BlockQuote::isSection() : Boolean {
	var textWithSectionStart := self.contents[mdMM::Paragraph].elements[mdMM::Text] -> 
		selectOne(t | t.text.toLower().trim().=("start section"));
	return textWithSectionStart <> null;
}

helper mdMM::Text::notSectionRef() : Boolean {
	return self.text.toLower().trim().<>("start section");
}

/**
* An helper to get specified tabCellAlignment.
*/
helper mdMM::TableCellAlignement::getTabCellAlignment() : usdMM::TableCellAlignement {
	var alignment := usdMM::TableCellAlignement::CENTER;
	var name := self.toString();
	switch {
		case(name.=("LEFT")) alignment := usdMM::TableCellAlignement::LEFT;
		case(name.=("RIGHT")) alignment := usdMM::TableCellAlignement::RIGHT;
	};
	return alignment;
	
}
