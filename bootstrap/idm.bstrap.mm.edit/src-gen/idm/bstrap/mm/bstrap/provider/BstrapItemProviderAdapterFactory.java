/**
 */
package idm.bstrap.mm.bstrap.provider;

import idm.bstrap.mm.bstrap.util.BstrapAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BstrapItemProviderAdapterFactory extends BstrapAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BstrapItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.FixContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixContainerItemProvider fixContainerItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.FixContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixContainerAdapter() {
		if (fixContainerItemProvider == null) {
			fixContainerItemProvider = new FixContainerItemProvider(this);
		}

		return fixContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.FluidContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FluidContainerItemProvider fluidContainerItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.FluidContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFluidContainerAdapter() {
		if (fluidContainerItemProvider == null) {
			fluidContainerItemProvider = new FluidContainerItemProvider(this);
		}

		return fluidContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Paragraphe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParagrapheItemProvider paragrapheItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Paragraphe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParagrapheAdapter() {
		if (paragrapheItemProvider == null) {
			paragrapheItemProvider = new ParagrapheItemProvider(this);
		}

		return paragrapheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Title} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TitleItemProvider titleItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Title}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTitleAdapter() {
		if (titleItemProvider == null) {
			titleItemProvider = new TitleItemProvider(this);
		}

		return titleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Code} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeItemProvider codeItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Code}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeAdapter() {
		if (codeItemProvider == null) {
			codeItemProvider = new CodeItemProvider(this);
		}

		return codeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Margin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarginItemProvider marginItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Margin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarginAdapter() {
		if (marginItemProvider == null) {
			marginItemProvider = new MarginItemProvider(this);
		}

		return marginItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Padding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaddingItemProvider paddingItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Padding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaddingAdapter() {
		if (paddingItemProvider == null) {
			paddingItemProvider = new PaddingItemProvider(this);
		}

		return paddingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Background} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BackgroundItemProvider backgroundItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Background}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBackgroundAdapter() {
		if (backgroundItemProvider == null) {
			backgroundItemProvider = new BackgroundItemProvider(this);
		}

		return backgroundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Border} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BorderItemProvider borderItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Border}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBorderAdapter() {
		if (borderItemProvider == null) {
			borderItemProvider = new BorderItemProvider(this);
		}

		return borderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.ColoredBorder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColoredBorderItemProvider coloredBorderItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.ColoredBorder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColoredBorderAdapter() {
		if (coloredBorderItemProvider == null) {
			coloredBorderItemProvider = new ColoredBorderItemProvider(this);
		}

		return coloredBorderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Display1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Display1ItemProvider display1ItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Display1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplay1Adapter() {
		if (display1ItemProvider == null) {
			display1ItemProvider = new Display1ItemProvider(this);
		}

		return display1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Display2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Display2ItemProvider display2ItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Display2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplay2Adapter() {
		if (display2ItemProvider == null) {
			display2ItemProvider = new Display2ItemProvider(this);
		}

		return display2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Display3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Display3ItemProvider display3ItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Display3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplay3Adapter() {
		if (display3ItemProvider == null) {
			display3ItemProvider = new Display3ItemProvider(this);
		}

		return display3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Display4} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Display4ItemProvider display4ItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Display4}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplay4Adapter() {
		if (display4ItemProvider == null) {
			display4ItemProvider = new Display4ItemProvider(this);
		}

		return display4ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Rounded} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoundedItemProvider roundedItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Rounded}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoundedAdapter() {
		if (roundedItemProvider == null) {
			roundedItemProvider = new RoundedItemProvider(this);
		}

		return roundedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Thumbnail} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThumbnailItemProvider thumbnailItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Thumbnail}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThumbnailAdapter() {
		if (thumbnailItemProvider == null) {
			thumbnailItemProvider = new ThumbnailItemProvider(this);
		}

		return thumbnailItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Circle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CircleItemProvider circleItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Circle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCircleAdapter() {
		if (circleItemProvider == null) {
			circleItemProvider = new CircleItemProvider(this);
		}

		return circleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Float} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatItemProvider floatItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Float}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatAdapter() {
		if (floatItemProvider == null) {
			floatItemProvider = new FloatItemProvider(this);
		}

		return floatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Center} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CenterItemProvider centerItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Center}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCenterAdapter() {
		if (centerItemProvider == null) {
			centerItemProvider = new CenterItemProvider(this);
		}

		return centerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Responsive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponsiveItemProvider responsiveItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Responsive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponsiveAdapter() {
		if (responsiveItemProvider == null) {
			responsiveItemProvider = new ResponsiveItemProvider(this);
		}

		return responsiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.ButtonStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonStyleItemProvider buttonStyleItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.ButtonStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonStyleAdapter() {
		if (buttonStyleItemProvider == null) {
			buttonStyleItemProvider = new ButtonStyleItemProvider(this);
		}

		return buttonStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.ButtonSize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonSizeItemProvider buttonSizeItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.ButtonSize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonSizeAdapter() {
		if (buttonSizeItemProvider == null) {
			buttonSizeItemProvider = new ButtonSizeItemProvider(this);
		}

		return buttonSizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.ButtonLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonLinkItemProvider buttonLinkItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.ButtonLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonLinkAdapter() {
		if (buttonLinkItemProvider == null) {
			buttonLinkItemProvider = new ButtonLinkItemProvider(this);
		}

		return buttonLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Disabled} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisabledItemProvider disabledItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Disabled}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisabledAdapter() {
		if (disabledItemProvider == null) {
			disabledItemProvider = new DisabledItemProvider(this);
		}

		return disabledItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Active} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActiveItemProvider activeItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Active}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActiveAdapter() {
		if (activeItemProvider == null) {
			activeItemProvider = new ActiveItemProvider(this);
		}

		return activeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.OrderList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderListItemProvider orderListItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.OrderList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderListAdapter() {
		if (orderListItemProvider == null) {
			orderListItemProvider = new OrderListItemProvider(this);
		}

		return orderListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.UnOrderedList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnOrderedListItemProvider unOrderedListItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.UnOrderedList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnOrderedListAdapter() {
		if (unOrderedListItemProvider == null) {
			unOrderedListItemProvider = new UnOrderedListItemProvider(this);
		}

		return unOrderedListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.ListItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemItemProvider listItemItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.ListItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListItemAdapter() {
		if (listItemItemProvider == null) {
			listItemItemProvider = new ListItemItemProvider(this);
		}

		return listItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Navigation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationItemProvider navigationItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Navigation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationAdapter() {
		if (navigationItemProvider == null) {
			navigationItemProvider = new NavigationItemProvider(this);
		}

		return navigationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Centered} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CenteredItemProvider centeredItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Centered}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCenteredAdapter() {
		if (centeredItemProvider == null) {
			centeredItemProvider = new CenteredItemProvider(this);
		}

		return centeredItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.BasicList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicListItemProvider basicListItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.BasicList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicListAdapter() {
		if (basicListItemProvider == null) {
			basicListItemProvider = new BasicListItemProvider(this);
		}

		return basicListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.HorizontalList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalListItemProvider horizontalListItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.HorizontalList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalListAdapter() {
		if (horizontalListItemProvider == null) {
			horizontalListItemProvider = new HorizontalListItemProvider(this);
		}

		return horizontalListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Basic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicItemProvider basicItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Basic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicAdapter() {
		if (basicItemProvider == null) {
			basicItemProvider = new BasicItemProvider(this);
		}

		return basicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Vertical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerticalItemProvider verticalItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Vertical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerticalAdapter() {
		if (verticalItemProvider == null) {
			verticalItemProvider = new VerticalItemProvider(this);
		}

		return verticalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.ItalicProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItalicPropertyItemProvider italicPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.ItalicProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItalicPropertyAdapter() {
		if (italicPropertyItemProvider == null) {
			italicPropertyItemProvider = new ItalicPropertyItemProvider(this);
		}

		return italicPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Bold} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoldItemProvider boldItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Bold}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoldAdapter() {
		if (boldItemProvider == null) {
			boldItemProvider = new BoldItemProvider(this);
		}

		return boldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Strong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrongItemProvider strongItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Strong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrongAdapter() {
		if (strongItemProvider == null) {
			strongItemProvider = new StrongItemProvider(this);
		}

		return strongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Italic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItalicItemProvider italicItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Italic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItalicAdapter() {
		if (italicItemProvider == null) {
			italicItemProvider = new ItalicItemProvider(this);
		}

		return italicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Brand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrandItemProvider brandItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Brand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrandAdapter() {
		if (brandItemProvider == null) {
			brandItemProvider = new BrandItemProvider(this);
		}

		return brandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.LinkBrand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkBrandItemProvider linkBrandItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.LinkBrand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkBrandAdapter() {
		if (linkBrandItemProvider == null) {
			linkBrandItemProvider = new LinkBrandItemProvider(this);
		}

		return linkBrandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Thead} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheadItemProvider theadItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Thead}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheadAdapter() {
		if (theadItemProvider == null) {
			theadItemProvider = new TheadItemProvider(this);
		}

		return theadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Tbody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TbodyItemProvider tbodyItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Tbody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTbodyAdapter() {
		if (tbodyItemProvider == null) {
			tbodyItemProvider = new TbodyItemProvider(this);
		}

		return tbodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.Tfoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TfootItemProvider tfootItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.Tfoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTfootAdapter() {
		if (tfootItemProvider == null) {
			tfootItemProvider = new TfootItemProvider(this);
		}

		return tfootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.TableRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableRowItemProvider tableRowItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.TableRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableRowAdapter() {
		if (tableRowItemProvider == null) {
			tableRowItemProvider = new TableRowItemProvider(this);
		}

		return tableRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.TableCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableCellItemProvider tableCellItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.TableCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableCellAdapter() {
		if (tableCellItemProvider == null) {
			tableCellItemProvider = new TableCellItemProvider(this);
		}

		return tableCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.BasicTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicTableItemProvider basicTableItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.BasicTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicTableAdapter() {
		if (basicTableItemProvider == null) {
			basicTableItemProvider = new BasicTableItemProvider(this);
		}

		return basicTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.StripedRows} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StripedRowsItemProvider stripedRowsItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.StripedRows}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStripedRowsAdapter() {
		if (stripedRowsItemProvider == null) {
			stripedRowsItemProvider = new StripedRowsItemProvider(this);
		}

		return stripedRowsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.BorderedTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BorderedTableItemProvider borderedTableItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.BorderedTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBorderedTableAdapter() {
		if (borderedTableItemProvider == null) {
			borderedTableItemProvider = new BorderedTableItemProvider(this);
		}

		return borderedTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.HoverRows} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HoverRowsItemProvider hoverRowsItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.HoverRows}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHoverRowsAdapter() {
		if (hoverRowsItemProvider == null) {
			hoverRowsItemProvider = new HoverRowsItemProvider(this);
		}

		return hoverRowsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.DarkTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DarkTableItemProvider darkTableItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.DarkTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDarkTableAdapter() {
		if (darkTableItemProvider == null) {
			darkTableItemProvider = new DarkTableItemProvider(this);
		}

		return darkTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.BlockQuote} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockQuoteItemProvider blockQuoteItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.BlockQuote}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockQuoteAdapter() {
		if (blockQuoteItemProvider == null) {
			blockQuoteItemProvider = new BlockQuoteItemProvider(this);
		}

		return blockQuoteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.CodeBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeBlockItemProvider codeBlockItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.CodeBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeBlockAdapter() {
		if (codeBlockItemProvider == null) {
			codeBlockItemProvider = new CodeBlockItemProvider(this);
		}

		return codeBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.CodeLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeLineItemProvider codeLineItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.CodeLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeLineAdapter() {
		if (codeLineItemProvider == null) {
			codeLineItemProvider = new CodeLineItemProvider(this);
		}

		return codeLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.HorizontalLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalLineItemProvider horizontalLineItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.HorizontalLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalLineAdapter() {
		if (horizontalLineItemProvider == null) {
			horizontalLineItemProvider = new HorizontalLineItemProvider(this);
		}

		return horizontalLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.ButtonOutLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonOutLineItemProvider buttonOutLineItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.ButtonOutLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonOutLineAdapter() {
		if (buttonOutLineItemProvider == null) {
			buttonOutLineItemProvider = new ButtonOutLineItemProvider(this);
		}

		return buttonOutLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link idm.bstrap.mm.bstrap.ButtonSpinner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonSpinnerItemProvider buttonSpinnerItemProvider;

	/**
	 * This creates an adapter for a {@link idm.bstrap.mm.bstrap.ButtonSpinner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonSpinnerAdapter() {
		if (buttonSpinnerItemProvider == null) {
			buttonSpinnerItemProvider = new ButtonSpinnerItemProvider(this);
		}

		return buttonSpinnerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pageItemProvider != null)
			pageItemProvider.dispose();
		if (fixContainerItemProvider != null)
			fixContainerItemProvider.dispose();
		if (fluidContainerItemProvider != null)
			fluidContainerItemProvider.dispose();
		if (paragrapheItemProvider != null)
			paragrapheItemProvider.dispose();
		if (titleItemProvider != null)
			titleItemProvider.dispose();
		if (textItemProvider != null)
			textItemProvider.dispose();
		if (codeItemProvider != null)
			codeItemProvider.dispose();
		if (imageItemProvider != null)
			imageItemProvider.dispose();
		if (marginItemProvider != null)
			marginItemProvider.dispose();
		if (paddingItemProvider != null)
			paddingItemProvider.dispose();
		if (backgroundItemProvider != null)
			backgroundItemProvider.dispose();
		if (borderItemProvider != null)
			borderItemProvider.dispose();
		if (coloredBorderItemProvider != null)
			coloredBorderItemProvider.dispose();
		if (display1ItemProvider != null)
			display1ItemProvider.dispose();
		if (display2ItemProvider != null)
			display2ItemProvider.dispose();
		if (display3ItemProvider != null)
			display3ItemProvider.dispose();
		if (display4ItemProvider != null)
			display4ItemProvider.dispose();
		if (roundedItemProvider != null)
			roundedItemProvider.dispose();
		if (thumbnailItemProvider != null)
			thumbnailItemProvider.dispose();
		if (circleItemProvider != null)
			circleItemProvider.dispose();
		if (floatItemProvider != null)
			floatItemProvider.dispose();
		if (centerItemProvider != null)
			centerItemProvider.dispose();
		if (responsiveItemProvider != null)
			responsiveItemProvider.dispose();
		if (buttonStyleItemProvider != null)
			buttonStyleItemProvider.dispose();
		if (buttonSizeItemProvider != null)
			buttonSizeItemProvider.dispose();
		if (buttonLinkItemProvider != null)
			buttonLinkItemProvider.dispose();
		if (disabledItemProvider != null)
			disabledItemProvider.dispose();
		if (activeItemProvider != null)
			activeItemProvider.dispose();
		if (buttonItemProvider != null)
			buttonItemProvider.dispose();
		if (orderListItemProvider != null)
			orderListItemProvider.dispose();
		if (unOrderedListItemProvider != null)
			unOrderedListItemProvider.dispose();
		if (listItemItemProvider != null)
			listItemItemProvider.dispose();
		if (navigationItemProvider != null)
			navigationItemProvider.dispose();
		if (centeredItemProvider != null)
			centeredItemProvider.dispose();
		if (basicListItemProvider != null)
			basicListItemProvider.dispose();
		if (horizontalListItemProvider != null)
			horizontalListItemProvider.dispose();
		if (basicItemProvider != null)
			basicItemProvider.dispose();
		if (verticalItemProvider != null)
			verticalItemProvider.dispose();
		if (italicPropertyItemProvider != null)
			italicPropertyItemProvider.dispose();
		if (boldItemProvider != null)
			boldItemProvider.dispose();
		if (linkItemProvider != null)
			linkItemProvider.dispose();
		if (strongItemProvider != null)
			strongItemProvider.dispose();
		if (italicItemProvider != null)
			italicItemProvider.dispose();
		if (brandItemProvider != null)
			brandItemProvider.dispose();
		if (linkBrandItemProvider != null)
			linkBrandItemProvider.dispose();
		if (tableItemProvider != null)
			tableItemProvider.dispose();
		if (theadItemProvider != null)
			theadItemProvider.dispose();
		if (tbodyItemProvider != null)
			tbodyItemProvider.dispose();
		if (tfootItemProvider != null)
			tfootItemProvider.dispose();
		if (tableRowItemProvider != null)
			tableRowItemProvider.dispose();
		if (tableCellItemProvider != null)
			tableCellItemProvider.dispose();
		if (basicTableItemProvider != null)
			basicTableItemProvider.dispose();
		if (stripedRowsItemProvider != null)
			stripedRowsItemProvider.dispose();
		if (borderedTableItemProvider != null)
			borderedTableItemProvider.dispose();
		if (hoverRowsItemProvider != null)
			hoverRowsItemProvider.dispose();
		if (darkTableItemProvider != null)
			darkTableItemProvider.dispose();
		if (blockQuoteItemProvider != null)
			blockQuoteItemProvider.dispose();
		if (codeBlockItemProvider != null)
			codeBlockItemProvider.dispose();
		if (codeLineItemProvider != null)
			codeLineItemProvider.dispose();
		if (horizontalLineItemProvider != null)
			horizontalLineItemProvider.dispose();
		if (buttonOutLineItemProvider != null)
			buttonOutLineItemProvider.dispose();
		if (buttonSpinnerItemProvider != null)
			buttonSpinnerItemProvider.dispose();
	}

}
